<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Categories</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
        }

        .category-row {
            background-color: #f0f0f0;
        }

        .subcategory-header {
            background-color: #e0e0e0;
        }

        .subcategory-row {
            background-color: #ffffff;
        }

        .cat-img {
            cursor: pointer;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .header h1 {
            font-size: 24px;
        }

        .header button {
            background-color: #007bff;
            color: #fff;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .table th,
        .table td {
            text-align: center;
            padding: 10px;
        }

        .table th {
            background-color: #f9f9f9;
        }

        .table img {
            width: 50px;
            height: 50px;
            border-radius: 5px;
            object-fit: cover;
        }

        .table .status {
            display: flex;
            align-items: center;
        }

        .table .count {
            padding-left: 20px;
        }

        .table .status i {
            margin-right: 5px;
            color: green;
        }

        .table button {
            background-color: #f0f0f0;
            border: none;
            margin-left: 7px;
            border-radius: 5px;
            padding: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .table .btn-edit {
            border: 2px solid #ffc107;
            background-color: transparent;
            color: #ffc107;
        }

        .table .btn-delete {
            border: 2px solid #dc3545;
            background-color: transparent;
            color: #dc3545;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 600px;
            border-radius: 5px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            position: relative;
        }

        .close {
            color: #aaa;
            position: absolute;
            top: 10px;
            right: 15px;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-group label {
            display: block;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .form-group input[type="text"],
        .form-group input[type="file"] {
            width: 100%;
            padding: 0.5rem;
            font-size: 1rem;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .form-group input[type="file"] {
            padding: 0.8rem;
        }

        .form-group .preview-image {
            margin-top: 0.5rem;
            max-width: 100px;
            max-height: 100px;
        }

        .form-group .btn-update {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            cursor: pointer;
        }

        .form-group .btn-update:hover {
            background-color: #0056b3;
        }

        @media (max-width: 992px) {
            .container {
                padding: 10px;
            }
        }

        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                align-items: stretch;
            }

            .header h1 {
                font-size: 20px;
                margin-bottom: 10px;
            }

            .header button {
                margin-top: 10px;
                width: 100%;
            }

            .table th,
            .table td {
                padding: 8px;
            }

            .table img {
                width: 40px;
                height: 40px;
            }

            .table button {
                padding: 3px;
            }

            .modal-content {
                width: 90%;
                max-width: 400px;
            }
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="header">
            <h1>Categories</h1>
            <button id="addNewCategory" onclick="$('#main-content').load('/add-Category');">Add New Category</button>
        </div>
        <table class="table">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Category Image</th>
                    <th>Category Name</th>
                    <th>Products</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody id="categoryTableBody">
                <!-- Categories will be inserted here -->
            </tbody>
        </table>
    </div>
    <!-- Modal for Update Form -->
    <div id="updateModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2 id="modalTitle"></h2>
            <form id="updateForm">
                <div class="form-group">
                    <label for="updateImage" id="updateImageLabel"></label>
                    <input type="file" id="updateImage" accept="image/*">
                    <img class="preview-image" id="updateImagePreview" src="#" alt="Preview">
                </div>
                <div class="form-group">
                    <label for="updateName" id="updateNameLabel"></label>
                    <input type="text" id="updateName" required>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn-update">Update</button>
                </div>
            </form>
        </div>
    </div>
    <script>
        async function fetchCategories() {
            try {
                const response = await fetch('/categories', { method: "GET" });
                const data = await response.json();
                const { categories, product_details } = data;
                const categoryTableBody = document.getElementById('categoryTableBody');
                categoryTableBody.innerHTML = '';

                for (const [index, category] of categories.entries()) {
                    const productDetail = product_details.find(product => product._id.toString() === category._id.toString());
                    const productCount = productDetail ? productDetail.product_info.length : 0;
                    const row = document.createElement('tr');
                    row.classList.add('category-row');
                    row.innerHTML = `
                <td>${index + 1}</td>
                <td>
                    <img class="cat-img" src="images/${category.image}" alt="${category.name}">
                </td>
                <td class="name">${category.name}</td>
                <td class="count">${productCount || 0}</td>
                <td>
                    <button class="btn-edit" onclick="editCategory('${category._id}')"><i class="fas fa-edit"></i> Edit</button>
                    <button class="btn-delete" onclick="deleteCategory('${category._id}')"><i class="fas fa-trash"></i> Delete</button>
                </td>
            `;

                    const subcategoriesExist = await checkForSubcategories(category._id);

                    if (subcategoriesExist) {
                        const categoryImage = row.querySelector('.cat-img');
                        categoryImage.addEventListener('click', () => {
                            toggleSubcategories(category._id, row);
                        });
                    }

                    categoryTableBody.appendChild(row);
                }
            } catch (error) {
                console.error('Fetch error:', error);
            }
        }

        async function checkForSubcategories(categoryId) {
            try {
                const response = await fetch(`/subcategories/${categoryId}`, { method: "GET" });
                const data = await response.json();
                return data.subcategories.length > 0;
            } catch (error) {
                console.error('Fetch subcategories error:', error);
                return false;
            }
        }

        async function fetchSubcategories(categoryId) {
            try {
                const response = await fetch(`/subcategories/${categoryId}`, { method: "GET" });
                const data = await response.json();
                return data;
            } catch (error) {
                console.error('Fetch error:', error);
                return [];
            }
        }

        async function toggleSubcategories(categoryId, categoryRow) {
            const existingSubcategoryHeader = categoryRow.nextElementSibling && categoryRow.nextElementSibling.classList.contains('subcategory-header');

            if (existingSubcategoryHeader) {
                let nextRow = categoryRow.nextElementSibling;
                while (nextRow && (nextRow.classList.contains('subcategory-header') || nextRow.classList.contains('subcategory-row'))) {
                    const rowToRemove = nextRow;
                    nextRow = nextRow.nextElementSibling;
                    rowToRemove.remove();
                }
            } else {
                const subcategoriesData = await fetchSubcategories(categoryId);
                const { subcategories, product_details } = subcategoriesData;

                const subcategoryHeader = document.createElement('tr');
                subcategoryHeader.classList.add('subcategory-header');
                subcategoryHeader.innerHTML = `
            <th>#</th>
            <th>Subcategory Image</th>
            <th>Subcategory Name</th>
            <th>Products</th>
            <th>Action</th>
        `;
                categoryRow.after(subcategoryHeader);
                let lastInsertedRow = subcategoryHeader;

                subcategories.forEach((subcategory, index) => {
                    const productDetail = product_details.find(product => product._id.toString() === subcategory._id.toString());
                    const productCount = productDetail ? productDetail.product_info.length : 0;
                    const row = document.createElement('tr');
                    row.classList.add('subcategory-row');
                    row.innerHTML = `
                <td>${index + 1}</td>
                <td>
                    <img src="images/${subcategory.image}" alt="${subcategory.name}">
                </td>
                <td>${subcategory.name}</td>
                <td class="count">${productCount || 0}</td>
                <td>
                    <button class="btn-edit" onclick="editSubcategory('${subcategory._id}')"><i class="fas fa-edit"></i> Edit</button>
                    <button class="btn-delete" onclick="deleteSubcategory('${subcategory._id}')"><i class="fas fa-trash"></i> Delete</button>
                </td>
            `;
                    lastInsertedRow.after(row);
                    lastInsertedRow = row;
                });
            }
        }
        document.addEventListener('DOMContentLoaded', fetchCategories());

        // Function to populate form and show modal for editing category

        async function editCategory(categoryId) {
            try {
                const response = await fetch(`/categories/${categoryId}`);
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                const category = await response.json();

                // Update modal title and labels
                document.getElementById('modalTitle').textContent = 'Update Category';
                document.getElementById('updateImageLabel').textContent = 'Category Image:';
                document.getElementById('updateNameLabel').textContent = 'Category Name:';

                document.getElementById('updateName').value = category.name;
                document.getElementById('updateImagePreview').src = `images/${category.image}`;

                // Show modal
                const modal = document.getElementById('updateModal');
                modal.style.display = 'block';
                document.body.style.overflow = 'hidden';
                document.getElementById('updateForm').dataset.itemId = categoryId;
                document.getElementById('updateForm').dataset.type = 'category';
            } catch (error) {
                console.error('Fetch category error:', error);
            }
        }

        // Function to populate form and show modal for editing subcategory
        async function editSubcategory(subcategoryId) {
            try {
                const response = await fetch(`/subcategory/${subcategoryId}`);
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                const subcategory = await response.json();
                console.log(subcategory.name);
                // Update modal title and labels
                document.getElementById('modalTitle').textContent = 'Update Subcategory';
                document.getElementById('updateImageLabel').textContent = 'Subcategory Image:';
                document.getElementById('updateNameLabel').textContent = 'Subcategory Name:';

                document.getElementById('updateName').value = subcategory.name;
                document.getElementById('updateImagePreview').src = `images/${subcategory.image}`;

                // Show modal
                const modal = document.getElementById('updateModal');
                modal.style.display = 'block';
                document.body.style.overflow = 'hidden';
                document.getElementById('updateForm').dataset.itemId = subcategoryId;
                document.getElementById('updateForm').dataset.type = 'subcategory';
            } catch (error) {
                console.error('Fetch subcategory error:', error);
            }
        }

        // Function to close modal
        function closeModal() {
            const modal = document.getElementById('updateModal');
            modal.style.display = 'none';
            document.body.style.overflow = ''; // Enable scrolling
        }

        // Close modal when clicking close button
        document.querySelector('.close').addEventListener('click', closeModal);

        // Close modal when clicking outside of modal content
        window.onclick = function (event) {
            const modal = document.getElementById('updateModal');
            if (event.target === modal) {
                closeModal();
            }
        };

        // Submit form handling
        document.getElementById('updateImage').addEventListener('change', function (event) {
            const file = event.target.files[0];
            const preview = document.getElementById('updateImagePreview');
            const reader = new FileReader();

            reader.onloadend = function () {
                preview.src = reader.result;
            };

            if (file) {
                reader.readAsDataURL(file);
            } else {
                preview.src = '#';
            }
        });

        // Submit form handling
        document.getElementById('updateForm').addEventListener('submit', async function (event) {
            event.preventDefault();
            const itemId = event.currentTarget.dataset.itemId;
            const itemType = event.currentTarget.dataset.type;
            const itemName = document.getElementById('updateName').value;
            const itemImage = document.getElementById('updateImage').files[0];

            try {
                const formData = new FormData();
                formData.append('name', itemName);
                formData.append('image', itemImage);

                const response = await fetch(`/admin/update-${itemType}/${itemId}`, {
                    method: 'PUT',
                    body: formData
                });

                if (response.ok) {
                    closeModal();
                    fetchCategories();
                } else {
                    throw new Error(`Failed to update ${itemType}`);
                }
            } catch (error) {
                console.error('Update error:', error);
            }
        });

        async function deleteCategory(categoryId) {
            if (confirm('Are you sure you want to delete this category?')) {
                try {
                    const response = await fetch(`/admin/delete-category/${categoryId}`, {
                        method: 'DELETE'
                    });

                    if (response.ok) {
                        fetchCategories();
                    } else {
                        throw new Error('Failed to delete category');
                    }
                } catch (error) {
                    console.error('Delete error:', error);
                }
            }
        }

        async function deleteSubcategory(subcategoryId) {
            if (confirm('Are you sure you want to delete this subcategory?')) {
                try {
                    const response = await fetch(`/admin/delete-subcategory/${subcategoryId}`, {
                        method: 'DELETE'
                    });

                    if (response.ok) {
                        console.log('Subcategory deleted successfully');
                        fetchCategories();
                    } else {
                        const errorData = await response.json();
                        console.error('Delete error:', errorData.message || 'Failed to delete subcategory');
                    }
                } catch (error) {
                    console.error('Delete error:', error);
                }
            }
        }
    </script>
</body>
</html>